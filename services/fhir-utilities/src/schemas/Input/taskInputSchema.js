import Joi from 'joi';
import {
  extensionInputSchema,
  codeableConceptInputSchema,
  referenceInputSchema,
  identifierInputSchema,
  periodInputSchema,
  annotationInputSchema,
} from './inputSchema.js';

/**
 * Task Input Schema
 */

// Restriction Schema
const restrictionInputSchema = Joi.object({
  repetitions: Joi.number().integer().min(1),
  period: periodInputSchema,
  recipient: Joi.array().items(referenceInputSchema),
});

// Input Schema
const inputInputSchema = Joi.object({
  type: Joi.alternatives().try(Joi.string(), codeableConceptInputSchema).required().messages({
    'any.required': 'Input type is required',
  }),
  valueBase64Binary: Joi.string(),
  valueBoolean: Joi.boolean(),
  valueCanonical: Joi.string().uri(),
  valueCode: Joi.string(),
  valueDate: Joi.date().iso(),
  valueDateTime: Joi.date().iso(),
  valueDecimal: Joi.number(),
  valueId: Joi.string(),
  valueInstant: Joi.date().iso(),
  valueInteger: Joi.number().integer(),
  valueMarkdown: Joi.string(),
  valueOid: Joi.string(),
  valuePositiveInt: Joi.number().integer().min(1),
  valueString: Joi.string(),
  valueTime: Joi.string(),
  valueUnsignedInt: Joi.number().integer().min(0),
  valueUri: Joi.string().uri(),
  valueUrl: Joi.string().uri(),
  valueUuid: Joi.string(),
  valueAddress: Joi.object({
    use: Joi.string().valid('home', 'work', 'temp', 'old', 'billing').default('home'),
    type: Joi.string().valid('postal', 'physical', 'both').default('physical'),
    text: Joi.string(),
    line: Joi.array().items(Joi.string()),
    city: Joi.string(),
    district: Joi.string(),
    state: Joi.string(),
    postalCode: Joi.string(),
    country: Joi.string().default('IN'),
    period: Joi.object({
      start: Joi.date().iso(),
      end: Joi.date().iso(),
    }),
  }),
  valueAge: Joi.object({
    value: Joi.number().required(),
    unit: Joi.string(),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valueAnnotation: annotationInputSchema,
  valueAttachment: Joi.object({
    contentType: Joi.string(),
    url: Joi.string().uri(),
    size: Joi.number().integer(),
    title: Joi.string(),
  }),
  valueCodeableConcept: Joi.alternatives().try(
    Joi.object({
      code: Joi.string().required(),
      display: Joi.string(),
      text: Joi.string(),
    }),
    Joi.object({
      coding: Joi.array()
        .items(
          Joi.object({
            system: Joi.string().uri(),
            version: Joi.string(),
            code: Joi.string().required(),
            display: Joi.string(),
            userSelected: Joi.boolean(),
          }),
        )
        .min(1),
      text: Joi.string(),
    }),
  ),
  valueCoding: Joi.object({
    system: Joi.string().uri(),
    version: Joi.string(),
    code: Joi.string(),
    display: Joi.string(),
    userSelected: Joi.boolean(),
  }),
  valueContactPoint: Joi.object({
    system: Joi.string().valid('phone', 'fax', 'email', 'pager', 'url', 'sms', 'other').required(),
    value: Joi.string().required(),
    use: Joi.string().valid('home', 'work', 'temp', 'old', 'mobile').default('home'),
    rank: Joi.number().integer().min(1),
    period: Joi.object({
      start: Joi.date().iso(),
      end: Joi.date().iso(),
    }),
  }),
  valueCount: Joi.object({
    value: Joi.number().required(),
    unit: Joi.string(),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valueDistance: Joi.object({
    value: Joi.number().required(),
    unit: Joi.string(),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valueDuration: Joi.object({
    value: Joi.number().required(),
    unit: Joi.string(),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valueHumanName: Joi.object({
    use: Joi.string().valid('usual', 'official', 'temp', 'nickname', 'anonymous', 'old', 'maiden'),
    text: Joi.string(),
    family: Joi.string(),
    given: Joi.array().items(Joi.string()),
    prefix: Joi.array().items(Joi.string()),
    suffix: Joi.array().items(Joi.string()),
    period: Joi.object({
      start: Joi.date().iso(),
      end: Joi.date().iso(),
    }),
  }),
  valueIdentifier: identifierInputSchema,
  valueMoney: Joi.object({
    value: Joi.number().required(),
    currency: Joi.string().default('INR'),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valuePeriod: periodInputSchema,
  valueQuantity: Joi.object({
    value: Joi.number().required(),
    unit: Joi.string(),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valueRange: Joi.object({
    low: Joi.object({
      value: Joi.number(),
      unit: Joi.string(),
      system: Joi.string().uri(),
      code: Joi.string(),
    }),
    high: Joi.object({
      value: Joi.number(),
      unit: Joi.string(),
      system: Joi.string().uri(),
      code: Joi.string(),
    }),
  }),
  valueRatio: Joi.object({
    numerator: Joi.object({
      value: Joi.number(),
      unit: Joi.string(),
      system: Joi.string().uri(),
      code: Joi.string(),
    }),
    denominator: Joi.object({
      value: Joi.number(),
      unit: Joi.string(),
      system: Joi.string().uri(),
      code: Joi.string(),
    }),
  }),
  valueReference: referenceInputSchema,
  valueSignature: Joi.object({
    type: Joi.array().items(
      Joi.object({
        system: Joi.string().uri(),
        version: Joi.string(),
        code: Joi.string().required(),
        display: Joi.string(),
        userSelected: Joi.boolean(),
      }),
    ),
    when: Joi.date().iso().required(),
    who: referenceInputSchema.required(),
    onBehalfOf: referenceInputSchema,
    targetFormat: Joi.string(),
    sigFormat: Joi.string(),
    data: Joi.string(),
  }),
  valueTiming: Joi.object({
    event: Joi.array().items(Joi.date().iso()),
    repeat: Joi.object({
      boundsDuration: Joi.object({
        value: Joi.number().required(),
        unit: Joi.string(),
        system: Joi.string().uri(),
        code: Joi.string(),
      }),
      boundsRange: Joi.object({
        low: Joi.object({
          value: Joi.number(),
          unit: Joi.string(),
          system: Joi.string().uri(),
          code: Joi.string(),
        }),
        high: Joi.object({
          value: Joi.number(),
          unit: Joi.string(),
          system: Joi.string().uri(),
          code: Joi.string(),
        }),
      }),
      boundsPeriod: periodInputSchema,
      count: Joi.number().integer().min(0),
      countMax: Joi.number().integer().min(0),
      duration: Joi.number(),
      durationMax: Joi.number(),
      durationUnit: Joi.string().valid('h', 'd', 'wk', 'mo', 'a'),
      frequency: Joi.number().integer().min(1),
      frequencyMax: Joi.number().integer().min(1),
      period: Joi.number(),
      periodMax: Joi.number(),
      periodUnit: Joi.string().valid('h', 'd', 'wk', 'mo', 'a'),
      dayOfWeek: Joi.array().items(
        Joi.string().valid('mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'),
      ),
      timeOfDay: Joi.array().items(Joi.string()),
      when: Joi.array().items(
        Joi.string().valid(
          'MORN',
          'MORN.early',
          'MORN.late',
          'NOON',
          'AFT',
          'AFT.early',
          'AFT.late',
          'EVE',
          'EVE.early',
          'EVE.late',
          'NIGHT',
          'PHS',
          'HS',
          'WAKE',
          'C',
          'CM',
          'CD',
          'CV',
          'AC',
          'ACM',
          'ACD',
          'ACV',
          'PC',
          'PCM',
          'PCD',
          'PCV',
        ),
      ),
      offset: Joi.number().integer().min(0),
    }),
    code: Joi.alternatives().try(Joi.string(), codeableConceptInputSchema),
  }),
});

// Output Schema
const outputInputSchema = Joi.object({
  type: Joi.alternatives().try(Joi.string(), codeableConceptInputSchema).required().messages({
    'any.required': 'Output type is required',
  }),
  valueBase64Binary: Joi.string(),
  valueBoolean: Joi.boolean(),
  valueCanonical: Joi.string().uri(),
  valueCode: Joi.string(),
  valueDate: Joi.date().iso(),
  valueDateTime: Joi.date().iso(),
  valueDecimal: Joi.number(),
  valueId: Joi.string(),
  valueInstant: Joi.date().iso(),
  valueInteger: Joi.number().integer(),
  valueMarkdown: Joi.string(),
  valueOid: Joi.string(),
  valuePositiveInt: Joi.number().integer().min(1),
  valueString: Joi.string(),
  valueTime: Joi.string(),
  valueUnsignedInt: Joi.number().integer().min(0),
  valueUri: Joi.string().uri(),
  valueUrl: Joi.string().uri(),
  valueUuid: Joi.string(),
  valueAddress: Joi.object({
    use: Joi.string().valid('home', 'work', 'temp', 'old', 'billing').default('home'),
    type: Joi.string().valid('postal', 'physical', 'both').default('physical'),
    text: Joi.string(),
    line: Joi.array().items(Joi.string()),
    city: Joi.string(),
    district: Joi.string(),
    state: Joi.string(),
    postalCode: Joi.string(),
    country: Joi.string().default('IN'),
    period: Joi.object({
      start: Joi.date().iso(),
      end: Joi.date().iso(),
    }),
  }),
  valueAge: Joi.object({
    value: Joi.number().required(),
    unit: Joi.string(),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valueAnnotation: annotationInputSchema,
  valueAttachment: Joi.object({
    contentType: Joi.string(),
    url: Joi.string().uri(),
    size: Joi.number().integer(),
    title: Joi.string(),
  }),
  valueCodeableConcept: Joi.alternatives().try(
    Joi.object({
      code: Joi.string().required(),
      display: Joi.string(),
      text: Joi.string(),
    }),
    Joi.object({
      coding: Joi.array()
        .items(
          Joi.object({
            system: Joi.string().uri(),
            version: Joi.string(),
            code: Joi.string().required(),
            display: Joi.string(),
            userSelected: Joi.boolean(),
          }),
        )
        .min(1),
      text: Joi.string(),
    }),
  ),
  valueCoding: Joi.object({
    system: Joi.string().uri(),
    version: Joi.string(),
    code: Joi.string(),
    display: Joi.string(),
    userSelected: Joi.boolean(),
  }),
  valueContactPoint: Joi.object({
    system: Joi.string().valid('phone', 'fax', 'email', 'pager', 'url', 'sms', 'other').required(),
    value: Joi.string().required(),
    use: Joi.string().valid('home', 'work', 'temp', 'old', 'mobile').default('home'),
    rank: Joi.number().integer().min(1),
    period: Joi.object({
      start: Joi.date().iso(),
      end: Joi.date().iso(),
    }),
  }),
  valueCount: Joi.object({
    value: Joi.number().required(),
    unit: Joi.string(),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valueDistance: Joi.object({
    value: Joi.number().required(),
    unit: Joi.string(),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valueDuration: Joi.object({
    value: Joi.number().required(),
    unit: Joi.string(),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valueHumanName: Joi.object({
    use: Joi.string().valid('usual', 'official', 'temp', 'nickname', 'anonymous', 'old', 'maiden'),
    text: Joi.string(),
    family: Joi.string(),
    given: Joi.array().items(Joi.string()),
    prefix: Joi.array().items(Joi.string()),
    suffix: Joi.array().items(Joi.string()),
    period: Joi.object({
      start: Joi.date().iso(),
      end: Joi.date().iso(),
    }),
  }),
  valueIdentifier: identifierInputSchema,
  valueMoney: Joi.object({
    value: Joi.number().required(),
    currency: Joi.string().default('INR'),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valuePeriod: periodInputSchema,
  valueQuantity: Joi.object({
    value: Joi.number().required(),
    unit: Joi.string(),
    system: Joi.string().uri(),
    code: Joi.string(),
  }),
  valueRange: Joi.object({
    low: Joi.object({
      value: Joi.number(),
      unit: Joi.string(),
      system: Joi.string().uri(),
      code: Joi.string(),
    }),
    high: Joi.object({
      value: Joi.number(),
      unit: Joi.string(),
      system: Joi.string().uri(),
      code: Joi.string(),
    }),
  }),
  valueRatio: Joi.object({
    numerator: Joi.object({
      value: Joi.number(),
      unit: Joi.string(),
      system: Joi.string().uri(),
      code: Joi.string(),
    }),
    denominator: Joi.object({
      value: Joi.number(),
      unit: Joi.string(),
      system: Joi.string().uri(),
      code: Joi.string(),
    }),
  }),
  valueReference: referenceInputSchema,
  valueSignature: Joi.object({
    type: Joi.array().items(
      Joi.object({
        system: Joi.string().uri(),
        version: Joi.string(),
        code: Joi.string().required(),
        display: Joi.string(),
        userSelected: Joi.boolean(),
      }),
    ),
    when: Joi.date().iso().required(),
    who: referenceInputSchema.required(),
    onBehalfOf: referenceInputSchema,
    targetFormat: Joi.string(),
    sigFormat: Joi.string(),
    data: Joi.string(),
  }),
  valueTiming: Joi.object({
    event: Joi.array().items(Joi.date().iso()),
    repeat: Joi.object({
      boundsDuration: Joi.object({
        value: Joi.number().required(),
        unit: Joi.string(),
        system: Joi.string().uri(),
        code: Joi.string(),
      }),
      boundsRange: Joi.object({
        low: Joi.object({
          value: Joi.number(),
          unit: Joi.string(),
          system: Joi.string().uri(),
          code: Joi.string(),
        }),
        high: Joi.object({
          value: Joi.number(),
          unit: Joi.string(),
          system: Joi.string().uri(),
          code: Joi.string(),
        }),
      }),
      boundsPeriod: periodInputSchema,
      count: Joi.number().integer().min(0),
      countMax: Joi.number().integer().min(0),
      duration: Joi.number(),
      durationMax: Joi.number(),
      durationUnit: Joi.string().valid('h', 'd', 'wk', 'mo', 'a'),
      frequency: Joi.number().integer().min(1),
      frequencyMax: Joi.number().integer().min(1),
      period: Joi.number(),
      periodMax: Joi.number(),
      periodUnit: Joi.string().valid('h', 'd', 'wk', 'mo', 'a'),
      dayOfWeek: Joi.array().items(
        Joi.string().valid('mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'),
      ),
      timeOfDay: Joi.array().items(Joi.string()),
      when: Joi.array().items(
        Joi.string().valid(
          'MORN',
          'MORN.early',
          'MORN.late',
          'NOON',
          'AFT',
          'AFT.early',
          'AFT.late',
          'EVE',
          'EVE.early',
          'EVE.late',
          'NIGHT',
          'PHS',
          'HS',
          'WAKE',
          'C',
          'CM',
          'CD',
          'CV',
          'AC',
          'ACM',
          'ACD',
          'ACV',
          'PC',
          'PCM',
          'PCD',
          'PCV',
        ),
      ),
      offset: Joi.number().integer().min(0),
    }),
    code: Joi.alternatives().try(Joi.string(), codeableConceptInputSchema),
  }),
});

//Task Schema
const taskInputSchema = Joi.object({
  resourceType: Joi.string().valid('Task').required().messages({
    'any.required': 'Resource type is required and must be "Task"',
    'any.only': 'Resource type must be "Task"',
  }),
  language: Joi.string()
    .valid(
      'ar',
      'bn',
      'cs',
      'da',
      'de',
      'de-AT',
      'de-CH',
      'de-DE',
      'el',
      'en',
      'en-AU',
      'en-CA',
      'en-GB',
      'en-IN',
      'en-NZ',
      'en-SG',
      'en-US',
      'es',
      'es-AR',
      'es-ES',
      'es-UY',
      'fi',
      'fr',
      'fr-BE',
      'fr-CH',
      'fr-FR',
      'fy',
      'fy-NL',
      'hi',
      'hr',
      'it',
      'it-CH',
      'it-IT',
      'ja',
      'ko',
      'nl',
      'nl-BE',
      'nl-NL',
      'no',
      'no-NO',
      'pa',
      'pl',
      'pt',
      'pt-BR',
      'pt-PT',
      'ru',
      'ru-RU',
      'sr',
      'sr-RS',
      'sv',
      'sv-SE',
      'te',
      'zh',
      'zh-CN',
      'zh-HK',
      'zh-SG',
      'zh-TW',
    )
    .messages({
      'any.only': 'Language must be a valid language code from CommonLanguages value set',
    }),
  identifier: Joi.array().items(identifierInputSchema),
  instantiatesCanonical: Joi.string().uri(),
  instantiatesUri: Joi.string().uri(),
  basedOn: Joi.array().items(referenceInputSchema),
  groupIdentifier: identifierInputSchema,
  partOf: Joi.array().items(referenceInputSchema),
  status: Joi.string()
    .valid(
      'draft',
      'requested',
      'received',
      'accepted',
      'rejected',
      'ready',
      'cancelled',
      'in-progress',
      'on-hold',
      'failed',
      'completed',
      'entered-in-error',
    )
    .required()
    .messages({
      'any.required': 'Status is required',
      'any.only':
        'Status must be one of: draft, requested, received, accepted, rejected, ready, cancelled, in-progress, on-hold, failed, completed, entered-in-error',
    }),
  statusReason: Joi.alternatives().try(Joi.string(), codeableConceptInputSchema),
  businessStatus: Joi.alternatives().try(Joi.string(), codeableConceptInputSchema),
  intent: Joi.string()
    .valid(
      'unknown',
      'proposal',
      'plan',
      'order',
      'original-order',
      'reflex-order',
      'filler-order',
      'instance-order',
      'option',
    )
    .required()
    .messages({
      'any.required': 'Intent is required',
      'any.only':
        'Intent must be one of: unknown, proposal, plan, order, original-order, reflex-order, filler-order, instance-order, option',
    }),
  priority: Joi.string().valid('routine', 'urgent', 'asap', 'stat').messages({
    'any.only': 'Priority must be one of: routine, urgent, asap, stat',
  }),
  code: Joi.alternatives().try(Joi.string(), codeableConceptInputSchema),
  description: Joi.string(),
  focus: referenceInputSchema,
  for: referenceInputSchema,
  encounter: referenceInputSchema,
  executionPeriod: periodInputSchema,
  authoredOn: Joi.date().iso(),
  lastModified: Joi.date().iso(),
  requester: referenceInputSchema,
  performerType: Joi.array().items(
    Joi.alternatives().try(Joi.string(), codeableConceptInputSchema),
  ),
  owner: referenceInputSchema,
  location: referenceInputSchema,
  reasonCode: Joi.alternatives().try(Joi.string(), codeableConceptInputSchema),
  reasonReference: referenceInputSchema,
  insurance: Joi.array().items(referenceInputSchema),
  note: Joi.array().items(annotationInputSchema),
  relevantHistory: Joi.array().items(referenceInputSchema),
  restriction: restrictionInputSchema,
  input: Joi.array().items(inputInputSchema),
  output: Joi.array().items(outputInputSchema),
  extension: Joi.array().items(extensionInputSchema),
  modifierExtension: Joi.array().items(extensionInputSchema),
});

export default taskInputSchema;
